#+STARTUP: content

* shell 基础知识
** 进程列表
#+begin_src shell
# 命令列表
pwd;ls;cd /etc;pwd;cd;pwd;ls

# 进程列表
(pwd;ls;cd /etc;pwd;cd;pwd;ls)
#+end_src
括号的加入使得命令列表变成了进程列表，生成了一个子 shell 来执行对应的命令
查看是否生成了子 shell，可以借助环境变量 BASH_SUBSHELL 来查看。变量为 0 表示没有生成子 shell，大于等于 1 表示生成了子 shell。（zsh 的变量为 ZSH_SUBSHELL)

** coproc 协程

** 内建命令
使用 type 命令可以查看命令是否为内建命令
外部命令会新增进程来执行，相比于内建命令来回会有消耗

** history
history -a 可以在退出前强制将历史记录写入文件中
!!可以执行上一条命令
!+history 中的数字可以执行指定历史命令


* 环境变量
bash shell 用一个叫做环境变量的特性来存储有关 shell 会话和工作环境的信息。这项特性允许你在内存中存储数据，以便程序或 shell 中运行的脚本能够轻松访问到他们。这也是存储持久数据的一种简单方法。
环境变量分为两类：
1. 全局变量：对于 shell 会话和所生成的子 shell 都是可见的
2. 局部变量：只能在定义它们的进程中可见
** 查看全局环境变量
- printenv
- env
** 查看所有环境变量（包括局部环境变量和用户定义局部变量）
- set
** 创建用户定义局部变量
在 shell 中使用等号给变量赋值即可，值可以是数字或字符串
=注意变量名、等号和值之间是没有空格的=
建议用户定义局部变量用小写字母
** 创建全局环境变量
使用 export 命令完成。
=修改子shell中全局变量的值，并不会影响父shell中全局变量的值=
** 删除环境变量
使用 unset 命令删除环境变量，对全局变量和局部变量都有效
** 环境变量持久化
最好不要将自定义的环境变量放入/etc/profile 文件中，因为如果你升级了所用的发行版本，那么这个文件也会跟着更新，那你所有定制过的变量设置就全没了
** 数组变量
#+begin_src shell
myarr=(one two three four five)

# 只打印第一个
echo &myarr

# 打印指定位
echo ${myarr[2]}

# 打印所有
echo ${myarr[*]}
#+end_src
=使用 unset 命令删除指定位上的值时，并不会真的删除，只是会把这位上的值设置位空而已=


* 文件权限
** /etc/shadow 文件
该文件中共有 9 个字段，依次是：
1. 登录名
2. 加密后的密码
3. 自上次修改密码后过去的天数（自 1970 年 1 月 1 日开始计算）
4. 多少天后 =才能= 更改密码
5. 多少天后 =必须= 更改密码
6. 密码过期前提前多少天提醒用户
7. 密码过期后多少天禁用账户
8. 用户账户被禁用日期（自 1970 年 1 月 1 日开始计算）
9. 预留字段
** 添加新用户
使用 useradd 命令添加新用户。默认情况下 useradd 命令会根据/etc/default/useradd 文件中指定的内容来初始化新用户
可以使用-D 参数来查看 useradd 命令的默认值
常用参数
| 参数             | 描述                                                                |
|------------------+---------------------------------------------------------------------|
| -c comment       | 给新用户添加备注                                                    |
| -d home_dir      | 为主目录指定名字                                                    |
| -e expire_date   | 用 YYYY-MM-DD 格式指定账户过期的日期                                |
| -f inactive_days | 指定账户密码过期后多少天被禁用；0表示立马禁用，1表示禁用此功能      |
| -g initial_group | 执行用户的 GID 或组名                                               |
| -G group ...     | 指定一个或多个附加组                                                |
| -k               | 必须和-m 参数一期使用，将/etc/skel 目录下的内容复制到用户的主目录中 |
| -m               | 创建用户的主目录                                                    |
| -M               | 不创建用户主目录                                                    |
| -n               | 创建一个与用户名同名的新组                                          |
| -r               | 创建系统账户                                                        |
| -p passwd        | 指定默认密码                                                        |
| -s shell         | 执行默认 shell                                                      |
| -u uid           | 执行 UID                                                            |
** 删除用户
userdel 用来删除用户，但是该命令只会删除/etc/passwd 文件的用户信息。
加-r 参数可以删除用户的主目录
** 修改用户
*** usermod
:PROPERTIES:
:CUSTOM_ID: usermod
:END:
- -l 修改账户名称
- -L 锁定账户，使用户无法登录
- -p 修改账户密码
- -U 解除锁定
- -G groupd_name user_name 将指定用户加入指定组
*** passwd
修改调用账户的密码
-e 选项可以强制用户在下次登录时修改密码
*** chpasswd
可以批量修改账户的密码。可以从标准输入中读取登录名和密码对（由冒号分隔）。
*** chsh
修改账户默认登录 shell。只能使用 shell 绝对路劲
*** chfn
修改账户的备注信息
*** chage
管理账户有效期的命令
-d 设置上次修改密码到现在的天数
-E 设置密码过期的日期
-I 设置密码过期到锁定账户的天数
-m 设置修改密码之间要多少天
-W 设置密码过期前多久开始出现提示信息
命令的日期值有两种格式：
- YYYY-MM-DD
- 从 1970 年 1 月 1 日到当前日期的天数
** /etc/group 文件
共四个字段：
- 组名
- 组密码
- GID
- 属于改组的用户列表
** 创建新组
groupadd 创建新组，新组中是没有添加任何用户的
可以使用 [[#usermod]] 的 -G 参数
如果修改了当前账户的用户组，那么需要重新登录才能是组关系生效
** groupmod
-n 修改组名
-g 修改 GID
** 默认文件权限
umask 命令决定了新建文件的默认权限
=umask控制的是权限掩码=
umask 输出的数字共有四位，分别表示：
1. 粘着位
2. 所有者的读写执行权限
3. 同组用户的读写执行权限
4. 其他用户的读写执行权限
后面三位是八进制数字
umask 值通常会设置在/etc/profile 文件或者/etc/login.defs 文件中
新建 *文件* 默认权限是 666
新建 *目录* 的默认权限是 777
** 修改文件权限
chmod 有两种使用方式：
1. chmod 权限数字 文件
2. chmod [ugoa][+-=][rwxXstugo...]
   - X 如果对象是目录或者它已有执行权限，赋予执行权限
   - s 运行时重新设置 UID 或 GID
   - t 保留文件或目录
   - u 将权限设置为和所有者一样
   - g 将权限设置为和所属组一样
   - o 将权限设置和其他用户一样
** 修改文件所有者
#+begin_src shell
# chown 命令的格式如下
chown options owner[.group] file

# 可以只修改组
chown options .group file

# 如果用户名和组名相同可以用下面的命令同时修改
chown options owner. file
#+end_src
** 共享文件
每个文件和目录存储了 3 个 ewd 的信息位：
1. 设置用户 ID（SUID）：当文件被用户使用时，程序会以文件属主的权限运行
2. 设置组 ID（SGID）：对文件来说，程序会以文件属组的权限运行；对于目录来说，目中创建的新文件会以目录的默认属组作为默认属组
3. 粘着位：进程结束后文件还驻留在内存中


* 管理文件系统
修复文件系统的命令：fsck
